# chat_app.py

import time
import streamlit as st
from config import client

def run_chatbot(my_assistant, client):
    # Initialize session state for chat history
    if "messages" not in st.session_state:
        st.session_state["messages"] = []
    
    # Function to get a response from the assistant
    def get_gpt4_response(user_input):
        try:
            # Create a new thread and add the user's input
            my_thread = client.beta.threads.create()
            client.beta.threads.messages.create(
                thread_id=my_thread.id,
                role="user",
                content=user_input
            )

            # Run the assistant
            my_run = client.beta.threads.runs.create(
                thread_id=my_thread.id,
                assistant_id=my_assistant.id,
            )

            # Polling to check if the run is complete
            while my_run.status in ["queued", "in_progress"]:
                time.sleep(2)
                my_run = client.beta.threads.runs.retrieve(
                    thread_id=my_thread.id,
                    run_id=my_run.id
                )

            # Retrieve the assistant's response
            all_messages = client.beta.threads.messages.list(thread_id=my_thread.id)
            assistant_message = next(
                (msg for msg in all_messages.data if msg.role == "assistant"), None
            )
            if assistant_message and assistant_message.content:
                return assistant_message.content[0].text.value
            else:
                return "Sorry, no response generated by the assistant."
        except Exception as e:
            st.error(f"An error occurred: {e}")
            return "Sorry, I couldn't process your request."
    
    # Display chat interface
    st.title("Chat with UBT Assistant")
    
    chat_placeholder = st.empty() 
    typing_placeholder = st.empty()  # Placeholder for "Bot is typing..."
    
    def display_chat():
        with chat_placeholder.container():
            for message in st.session_state["messages"]:
                if message["role"] == "user":
                    st.markdown(f"**You:** {message['content']}")
                elif message["role"] == "assistant":
                    st.markdown(f"**Bot:** {message['content']}")
    
    display_chat()
    
    # Input form at the bottom of the page
    with st.form(key="chat_form", clear_on_submit=True):
        user_input = st.text_input("Your question:", placeholder="Type your question here...")
        submit_button = st.form_submit_button("Send")
    
    # Process user input and generate response
    if submit_button and user_input:
        # Add the user message to the chat history
        st.session_state["messages"].append({"role": "user", "content": user_input})
        display_chat()  
    
        with typing_placeholder:
            st.markdown("**Bot is typing...**")
    
        assistant_response = get_gpt4_response(user_input)
    
        typing_placeholder.empty()
    
        bot_message = {"role": "assistant", "content": ""}
        st.session_state["messages"].append(bot_message)
    
        for i in range(len(assistant_response) + 1):
            bot_message["content"] = assistant_response[:i]
            display_chat()
            time.sleep(0.05)